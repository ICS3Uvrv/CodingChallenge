//Langton's Ant (Rougayyah) 

/* directions 0: up, 1: left, 2: down: 3: right
* pixel white: true, black: false
* turn right: true, left: false*/
 
/*Animation of steps.  
If I set this to 1 the animation of the ant will be slow (for each step).
If increase it (10 or 100), the animation will be faster. Ex. 100*/

final int steps= 100; //adjust animation speed (1 -very slow, 10 -slow/medium, 100 -medium/fast, 1000 -fast)
 
int x;
int y;
int direction;
 
void setup() {
 // corridor after about 10000 cycles
 size(600, 600);
 
	colorMode(HSB, 255, 255); 
 background(random(255), random(255), random(255));
 
 x=width/2;
 y=height/2;
 
 direction=0;
}

int count=0;
 
void draw() {
 for(int i=0;i<steps;i++) { //increment- will increase the value of integer by 1 
   count++;
   boolean pix=get(x,y)!=-1; //white =-1 //Reads the color of any pixel gets colour of single pixel. 
	 
   setBool(x,y,pix); //the x & y parameters specify the pixel to change and the c parameter specifies the color value. 
 
   turn(pix); 
   move();
 
   if(x<0||y<0||x>=width||y>=height) {
     println("done");
     noLoop();
     break;
   }
 }
	//will print the number of steps to the console area. 
 if(count%1000==0) {
	 
	 //number of steps will print in top right corner of program with "text("Steps: " +count, 500, 120);"
	 fill(0);
	 textSize(18); 
	 text("Steps: " +count, 500, 120);
  println("Steps: "+count); // number of "repeating" (iteration) steps per frame
 }
}

void move() {
 switch(direction) {
		 //Denotes the different labels to be evaluated with the parameter in the switch structure.
		
		//when ant experiences a certain case, x or y variables can increase or decrease 
   case 0:
     y--; //Index for ant, Case 0 will mean that y decreases (y--)
     break;// breaks will end the execution of a certain structure
		 
   case 1:
     x--; //x decreases x--
     break;
		 
   case 2:
     y++; // y increases y++
     break;
		 
   case 3:
     x++; 
     break;
		 
		 //x increases x++
	 case 4:
		 x++ 
		 break; 
		 
		 //x decreases x--
	 case 5:
		 x-- 
		 break; 
 }
}
//If the program encounters a situation where the dir value does not fit into the set direction the value will instead be set to the highest or lowest value resetting the dir cycle

void turn(boolean rightleft) {
 direction+=rightleft?1:-1;
 if(direction==-1) direction=3;
 if(direction==4) direction=0;
}
 
void setBool(int x, int y, boolean white) {
	//colour
 set(x,y,white?#ffffff:#000000); 
}
